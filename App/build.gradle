
buildscript {
    dependencies {
        classpath "com.android.tools.build:gradle:" + androidToolsBuildGradle
        classpath "com.neenbedankt.gradle.plugins:android-apt:1.2"
    }
}

apply plugin: 'android'
apply plugin: 'android-apt'

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }

    buildTypes {
        release {
            runProguard false
            proguardFile 'proguard-project.txt'
        }
        debug {
            runProguard false
            testCoverageEnabled = true
        }
    }

    sourceSets.main {
        // src/gen is the target for generated content like json model
        java.srcDirs += 'build/generated/source/db'
    }

    // replace the #const_wiremock_ip# with your current ip address for test with wiremock
    applicationVariants.all { variant ->
        variant.mergeResources.doLast {
            def localIp = obtainCurrentIpAddress()
            File valuesFile = file("${buildDir}/intermediates/res/release/values/values.xml")
            if(valuesFile.exists()) {
                String content = valuesFile.getText('UTF-8')
                content = content.replaceAll("#const_wiremock_ip#", localIp)
                valuesFile.write(content, 'UTF-8')
            }
        }
    }
    dexOptions {
        jumboMode = true
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }
    // avoid errors with message 'Duplicate files copied in APK ...'
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
}
afterEvaluate {
    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        if (dx.additionalParameters == null) {
            dx.additionalParameters = []
        }
        dx.additionalParameters += '--multi-dex' // enable multidex

        // optional
        dx.additionalParameters += "--main-dex-list=$projectDir/dexlist".toString() // enable the main-dex-list
    }
}
dependencies {

    compile 'com.android.support:support-v4:19.1.0'
    compile 'br.com.izie.app:izieApp_android:+@aar'
    compile 'br.com.izie.app:izieApp_core:+'
    compile('com.actionbarsherlock:actionbarsherlock:4.4.0@aar')
    compile('com.doomonafireball.betterpickers:library:1.5.4.0@aar')
    compile('fr.avianey:facebook-android-api:3.18.0@aar')
    compile(group: 'br.com.izie.android.camera', name: 'library', version: '1.0.30', ext: 'aar')
    compile 'com.edmodo:cropper:1.0.1@aar'
    compile('com.github.johnpersano:supertoasts:1.3.4.1@aar')
//    compile('com.crashlytics.sdk.android:crashlytics:2.0.0@aar') {
//        transitive = true;
//    }
    compile 'com.helpshift:android-aar:3.6.0'

    compile project(':GenerateDatabaseClasses')
    compile project(':GenerateJsonRestModel')
    compile("org.springframework.android:spring-android-auth:1.0.1.RELEASE") { exclude module: '*' }
    compile("org.springframework.android:spring-android-core:1.0.1.RELEASE") { exclude module: '*' }
    compile("org.springframework.android:spring-android-rest-template:1.0.1.RELEASE") { exclude module: '*' }

    apt "org.androidannotations:androidannotations:" + androidAnnotationsVersion
    compile("org.androidannotations:androidannotations-api:" + androidAnnotationsAPIVersion )

    androidTestCompile 'com.google.guava:guava:14.0.1',
            'com.squareup.dagger:dagger:1.1.0',
            'org.hamcrest:hamcrest-integration:1.1',
            'org.hamcrest:hamcrest-core:1.1',
            'org.hamcrest:hamcrest-library:1.1',
            'com.jakewharton.espresso:espresso:1.1-r3'
}

apt {
    arguments {
        androidManifestFile variant.processResources.manifestFile
        resourcePackageName 'com.example'
    }
}

def obtainCurrentIpAddress() {
    InetAddress inetAddr = InetAddress.getLocalHost();

    byte[] addr = inetAddr.getAddress();
    String ipAddr = "";
    for (int i = 0; i < addr.length; i++) {
        if (i > 0) {
            ipAddr += ".";
        }
        ipAddr += addr[i] & 0xFF;
    }
    ipAddr
}

apply plugin: 'idea'

idea {
    module {
        //and some extra test source dirs
        testSourceDirs += file('src/test')
    }
}

// will be necessary when wiremock is used, to check if running
Process p1 = Runtime.getRuntime().exec("ping -c 1 www.google.com");
int returnVal = p1.waitFor();
boolean reachable = (returnVal==0);
println "Internet is reachable $reachable"